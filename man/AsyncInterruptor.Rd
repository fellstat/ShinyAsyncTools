% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/async-interrupt.R
\docType{data}
\name{AsyncInterruptor}
\alias{AsyncInterruptor}
\title{An interruptor useful for stopping child processes.}
\arguments{
\item{msg}{An error message string.}
}
\description{
This class is a simple wrapper around a Queue object
making adding interrupt checking to future code easy
to implement and read.
}
\details{
\strong{Methods}
  \describe{
    \item{\code{initialize(queue=shinyQueue())}}{
      Creates a new interruptor.
    }
    \item{\code{interrupt(msg="Signaled Interrupt")}}{
      Signals an interrupt
    }
    \item{\code{execInterrupts()}}{
      Executes anything pushed to the queue, including interrupts.
    }
    \item{\code{getInterrupts()}}{
      Gets the result of the queue's executing, not throwing the interrupts.
    }
  }
}
\examples{
library(future)
plan(multiprocess)
library(promises)
inter <- AsyncInterruptor$new()
fut <- future({
  for(i in 1:100){
    Sys.sleep(.01)
    inter$execInterrupts()
  }
})
catch(fut, function(e) print(paste0("From future --- ", e$message)))

inter$interrupt("Error: Stop Future")
Sys.sleep(.1)
inter$destroy()

}
\keyword{datasets}
