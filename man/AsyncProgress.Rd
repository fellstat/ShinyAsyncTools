% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/async-progress.R
\name{AsyncProgress}
\alias{AsyncProgress}
\title{A progress bar object where inc and set are usable within other processes}
\description{
An async compatible wrapper around Shiny's progress bar. It should be instatiated
from the main process, but may be closed, set and incremented from any process.
}
\details{
\strong{Methods}
  \describe{
    \item{\code{initialize(..., queue=shinyQueue(), millis=250, value=NULL, message=NULL, detail=NULL)}}{
      Creates a new progress panel and displays it.
    }
    \item{\code{set(value = NULL, message = NULL, detail = NULL)}}{
      Updates the progress panel. When called the first time, the
      progress panel is displayed.
    }
    \item{\code{inc(amount = 0.1, message = NULL, detail = NULL)}}{
      Like \code{set}, this updates the progress panel. The difference is
      that \code{inc} increases the progress bar by \code{amount}, instead
      of setting it to a specific value.
    }
    \item{\code{sequentialClose()}}{
      Removes the progress panel and destroys the queue. Must be called from main process.
    }
    \item{\code{close()}}{
      Fires a close signal and may be used from any process.
    }
  }
}
\examples{
## Only run examples in interactive R sessions
if (interactive()) {
library(shiny)
library(future)
plan(multiprocess)
ui <- fluidPage(
  actionButton("run","Run"),
  tableOutput("dataset")
)

server <- function(input, output, session) {

  dat <- reactiveVal()
  observeEvent(input$run, {
    progress <- AsyncProgress$new(session, min=1, max=15)
    future({
      for (i in 1:15) {
        progress$set(value = i)
        Sys.sleep(0.5)
      }
      progress$close()
      cars
    }) \%...>\% dat
    NULL
  })

  output$dataset <- renderTable({
    req(dat())
  })
}

shinyApp(ui, server)
}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{AsyncProgress$new()}}
\item \href{#method-getMax}{\code{AsyncProgress$getMax()}}
\item \href{#method-getMin}{\code{AsyncProgress$getMin()}}
\item \href{#method-sequentialClose}{\code{AsyncProgress$sequentialClose()}}
\item \href{#method-set}{\code{AsyncProgress$set()}}
\item \href{#method-inc}{\code{AsyncProgress$inc()}}
\item \href{#method-close}{\code{AsyncProgress$close()}}
\item \href{#method-clone}{\code{AsyncProgress$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AsyncProgress$new(
  ...,
  queue = shinyQueue(),
  millis = 250,
  value = NULL,
  message = NULL,
  detail = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{queue}}{A Queue object for message passing}

\item{\code{millis}}{How often in milliseconds should updates to the progress bar be checked for.}

\item{\code{value}}{A numeric value at which to set
the progress bar, relative to \code{min} and \code{max}.}

\item{\code{message}}{A single-element character vector; the message to be
displayed to the user, or \code{NULL} to hide the current message
(if any).}

\item{\code{detail}}{A single-element character vector; the detail message
to be displayed to the user, or \code{NULL} to hide the current
detail message (if any). The detail message will be shown with a
de-emphasized appearance relative to \code{message}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getMax"></a>}}
\subsection{Method \code{getMax()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AsyncProgress$getMax()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getMin"></a>}}
\subsection{Method \code{getMin()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AsyncProgress$getMin()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-sequentialClose"></a>}}
\subsection{Method \code{sequentialClose()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AsyncProgress$sequentialClose()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set"></a>}}
\subsection{Method \code{set()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AsyncProgress$set(value = NULL, message = NULL, detail = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A numeric value at which to set
the progress bar, relative to \code{min} and \code{max}.}

\item{\code{message}}{A single-element character vector; the message to be
displayed to the user, or \code{NULL} to hide the current message
(if any).}

\item{\code{detail}}{A single-element character vector; the detail message
to be displayed to the user, or \code{NULL} to hide the current
detail message (if any). The detail message will be shown with a
de-emphasized appearance relative to \code{message}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inc"></a>}}
\subsection{Method \code{inc()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AsyncProgress$inc(amount = 0.1, message = NULL, detail = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{message}}{A single-element character vector; the message to be
displayed to the user, or \code{NULL} to hide the current message
(if any).}

\item{\code{detail}}{A single-element character vector; the detail message
to be displayed to the user, or \code{NULL} to hide the current
detail message (if any). The detail message will be shown with a
de-emphasized appearance relative to \code{message}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-close"></a>}}
\subsection{Method \code{close()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AsyncProgress$close()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AsyncProgress$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
