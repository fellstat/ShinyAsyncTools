% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/consumer.R
\name{Consumer}
\alias{Consumer}
\title{A Class for reading and executing tasks from a source}
\description{
\strong{Methods}
  \describe{
    \item{\code{initialize(source, env=parent.frame(2))}}{
      Creates a Consumer object linked to the \code{source}.
    }
    \item{\code{setSource(source)}}{
      Sets the \code{Source} for this consumer.
    }
    \item{\code{getSource(source)}}{
      Gets the \code{Source} of this consumer.
    }
    \item{\code{consume(throwErrors=TRUE, env=parent.frame())}}{
      Executes all (unprocessed) signals fired to source from a Producer.
      if \code{throwErrors} is TRUE, the first error encountered is thrown
      after executing all signals. Signals are executed in the \code{env} environment.
      If \code{env} is NULL, the enviroment set at initialization is used.
    }
    \item{\code{start(millis=250, throwErrors=TRUE, env=parent.frame())}}{
      Starts executing \code{consume} every \code{millis} milliseconds. \code{throwErrors}
      and \code{env} are passed down to \code{consume}
    }
    \item{\code{stop()}}{
      Stops the periodic execution of \code{consume}.
    }
    \item{\code{clearHandlers()}}{
      Removes all handlers
    }
    \item{\code{removeHandler(signal, index)}}{
      Removes handler from 'signal' with position index
    }
    \item{\code{addHandler(func, signal)}}{
      Adds a handler for 'signal'. func should take three parameters: 1. the signal, 2. the message object, and 3. the evaluation environment.
    }
    \item{\code{initHandlers()}}{
      Adds the two default executeors.
    }
    \item{\code{finalize()}}{
      runs stop on object distruction
    }
  }
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Consumer$new()}}
\item \href{#method-setSource}{\code{Consumer$setSource()}}
\item \href{#method-getSource}{\code{Consumer$getSource()}}
\item \href{#method-consume}{\code{Consumer$consume()}}
\item \href{#method-start}{\code{Consumer$start()}}
\item \href{#method-stop}{\code{Consumer$stop()}}
\item \href{#method-addHandler}{\code{Consumer$addHandler()}}
\item \href{#method-clearHandlers}{\code{Consumer$clearHandlers()}}
\item \href{#method-removeHandler}{\code{Consumer$removeHandler()}}
\item \href{#method-initHandlers}{\code{Consumer$initHandlers()}}
\item \href{#method-finalize}{\code{Consumer$finalize()}}
\item \href{#method-clone}{\code{Consumer$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Consumer$new(source)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{source}}{a source, e.g. TextFileSource.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setSource"></a>}}
\subsection{Method \code{setSource()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Consumer$setSource(source)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{source}}{a source, e.g. TextFileSource.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSource"></a>}}
\subsection{Method \code{getSource()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Consumer$getSource()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-consume"></a>}}
\subsection{Method \code{consume()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Consumer$consume(throwErrors = TRUE, env = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{env}}{An enviroment specifying where to execute signals.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-start"></a>}}
\subsection{Method \code{start()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Consumer$start(millis = 250, env = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{millis}}{milliseconds.}

\item{\code{env}}{An enviroment specifying where to execute signals.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-stop"></a>}}
\subsection{Method \code{stop()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Consumer$stop()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addHandler"></a>}}
\subsection{Method \code{addHandler()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Consumer$addHandler(func, signal)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{signal}}{A string.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clearHandlers"></a>}}
\subsection{Method \code{clearHandlers()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Consumer$clearHandlers()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-removeHandler"></a>}}
\subsection{Method \code{removeHandler()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Consumer$removeHandler(signal, index)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{signal}}{A string.}

\item{\code{index}}{A position.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-initHandlers"></a>}}
\subsection{Method \code{initHandlers()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Consumer$initHandlers()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-finalize"></a>}}
\subsection{Method \code{finalize()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Consumer$finalize()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Consumer$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
